##git 명령어

git clone - 원격 레퍼지토리에서 로컬로 레퍼지토리를 복사하는 명령어

git add - git에게 파일 추적을 지시하는 명령어

git commit - 로컬 레퍼지토리에 현재 변경 사항을 커밋하는 명령어

git push - 변경된 사항들을 원격 레퍼지토리로 저장시키는 명령어

git pull - 원격 저장소의 내용을 가져와서 현재 브랜치와 병합해주는 명령어
    - git clone과 다른점 : 기존에 작업한 내용은 유지하면서 최신 코드로 업데이트할 수 있다

git branch - 작업하던 메인과 다른 새로운 가지를 만들어 기존 작업과 분리할 수 있는 명령어
    - 사용 이유 : 브랜치를 사용하면 불안정한 코드가 메인 코드 베이스에 병합되기 어려워지고, 메인으로 합병하기 전에 메인 브랜치에 방해없이 코드를 히스토리에 남길수있다.

git stash - 갑자기 다른 작업을 해야할 경우 커밋하기 애매한 경우 변경사항을 임시로 저장하는 명령어

##GitHub
깃허브(GitHub)는 개발자들의 SNS 같은 공간이다 Git을 이용해 버전관리를 하는 동시에 타 개발자들과의 결과물 공유를 하는 데 있어 아주 유용한 역할을 한다

## Checklist
* 형상관리 시스템은 왜 나오게 되었을까요?
    - 파일의 변경사항을 추적하고 여러 개발자와 협업하기 위해 나오게 되엇다.

* git은 어떤 형상관리 시스템이고 어떤 특징을 가지고 있을까요? 분산형 형상관리 시스템이란 무엇일까요?
  * git은 어떻게 개발되게 되었을까요? git이 분산형 시스템을 채택한 이유는 무엇일까요?
    - git은 분산형 형상관리 시스템이다. 이 시스템은 각 개발자가 중앙 서버에 접속하지 않은 상태에서도 코드 작업을 할 수 있는 것이 특징이다.
        - git은 리누스 토발즈가 cvn, svn이 마음에 들지않아 사용하지않다가 버틸수없어서 bitKeeper을 사용하던 도중 BitKeeper 쪽에서 리버스 엔지니어링을 문제로 일부 리눅스 개발자들을 제한하는 일이 발생했다
        이후 리누스 토발즈는 직접 버전 관리 시스템을 만들게 되었고 그것이 git이 되었다. git이 분산형 형상관리 시스템을 채택한 이유는 리눅스커널 프로젝트같은 대형 프로젝트에 개발자들이 독립적으로 작업한 변경사항을 빠르게 병합할 수 있기 때문에 채택한듯하다.(뇌피셜임)

* git과 GitHub은 어떻게 다를까요?
    - 깃은 버전 형상 관리 툴이고 Github는 그 git을 사용하는 프로젝트들을 올려둘 수 있는 웹 기반 호스팅 서비스이다.
    깃허브에 소스코드를 올려두면 전 세계 개발자와 협업할 수 있다.

* git의 clone/add/commit/push/pull/branch/stash 명령은 무엇이며 어떨 때 이용하나요? 그리고 어떻게 사용하나요?

* git의 Object, Commit, Head, Branch, Tag는 어떤 개념일까요? git 시스템은 프로젝트의 히스토리를 어떻게 저장할까요?
    - Object : C언어에 char,int,long,float,double과 같은 데이터 타입이 있는것처럼, git은 내부적으로 commit, tree, blob, tag의 4가지 오브젝트 타입을 가짐 // 자세한 내용 https://storycompiler.tistory.com/7
    - Commit : add명령어로 스테이징된 파일들을 -m 커밋 로그와 함께 변경사항들을 커밋(기록)하는 기능을 한다.
    - Branch : 특정한 기준에서 줄기를 나누어 작업할 수 있는 기능. 다른 개발자들끼리 각각 기능을 개발한 후 병합할 수 있어 생산성이 올라간다
    - Tag : 특정 커밋을 태그해 두는 명령어. 커밋과 태그의 차이점은 커밋의 경우 checkout 하여 내용을 수정할 수 있으나, 태그는 수정이 불가능 따라서 읽기전용 커밋같은 개념입니다. 
            브랜치와 비슷하게 생겼는데 둘 다 커밋을 가리키는 가벼운 포인터기 때문이다.
            *(보통 태그는 릴리즈할 때 사용을 많이 한다.)

* 리모트 git 저장소에 원하지 않는 파일이 올라갔을 때 이를 되돌리려면 어떻게 해야 할까요?
    - git reset HEAD : HEAD가 가리키는 시점의 버전으로 파일을 unstage하고 되돌린다.
    - git reset HEAD~[N]] : # 마지막 N개의 commit을 취소
    - 또는 git log --oneline를 불러와서 되돌아갈 커밋을 정하여 git reset --hard <commit_id>명령어로 해당 커밋으로 돌아간다
        - git reset [--hard] : hard옵션 사용시 되돌아가려는 이력 이후 모든 커밋들을 지워버립니다.
        - git reset [--soft] : 되돌아가고자하는 커밋으로 돌아가고 이후 커밋들이 지워지지않고 해당 내용의 인덱스와 스테이지도 존재하여 바로 다시 커밋할 수 있는 상태임
        - * git reset [--mixed] : reset명령어를 사용할 경우 기본 옵션 soft와 비슷하게 이력이 되돌아가고 이후 변경된 커밋들도 존재하지만 인덱스와 스테이지는 초기화되어 커밋을 하려면 다시 변경된 내용은 추가해야하는 상태임.

